{"meta":{"title":"我不是诸葛亮","subtitle":"宁可碌碌，不可无为","description":" iOS developer","author":"zhuguanliang","url":"http://example.com","root":"/"},"pages":[{"title":"tags","date":"2021-05-12T05:35:59.000Z","updated":"2021-05-12T05:39:20.011Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":"type: tagscomments: false"},{"title":"404 Not Found","date":"2019-09-22T02:41:27.000Z","updated":"2021-05-12T05:51:31.894Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":"对不起，您所访问的页面不存在或者已删除。 您可以点击此处返回首页。 NightTeam"}],"posts":[{"title":"swiftui初探（2）","slug":"swiftui初探（2）","date":"2020-01-17T04:49:00.000Z","updated":"2020-01-18T06:49:00.000Z","comments":true,"path":"2020/01/17/swiftui初探（2）/","link":"","permalink":"http://example.com/2020/01/17/swiftui%E5%88%9D%E6%8E%A2%EF%BC%882%EF%BC%89/","excerpt":"","text":"创建侧边菜单栏新建Home（SwiftUIView），添加我的账户标题与图片 12345678910111213 VStack &#123; HStack &#123; Image(systemName: &quot;creditcard&quot;) .imageScale(.large) .foregroundColor(Color(&quot;icons&quot;)) .frame(width: 32, height: 32) Text(&quot;我的账户&quot;) .font(.headline) &#125; &#125; &#125;&#125; 添加完整四个标签 1234567891011121314151617181920212223242526272829303132333435import SwiftUIstruct Home: View &#123; var body: some View &#123; VStack(alignment: .leading) &#123; MenuRow(image: &quot;person.crop.circle&quot;, text: &quot;我的账户&quot;) MenuRow(image: &quot;creditcard&quot;, text: &quot;记账&quot;) MenuRow(image: &quot;person.and.person&quot;, text: &quot;团队&quot;) MenuRow(image: &quot;arrow.uturn.down&quot;, text: &quot;退出&quot;) &#125; &#125;&#125;struct Home_Previews: PreviewProvider &#123; static var previews: some View &#123; Home() &#125;&#125;struct MenuRow: View &#123; var image = &quot;creditcard&quot; var text = &quot;我的账户&quot; var body: some View &#123; HStack &#123; Image(systemName: image) .imageScale(.large) .foregroundColor(Color(&quot;icons&quot;)) .frame(width: 32, height: 32) Text(text) .font(.headline) &#125; &#125;&#125; 靠左处理 1234567891011121314VStack(alignment: .leading , spacing : 20) &#123; MenuRow(image: &quot;person.crop.circle&quot;, text: &quot;我的账户&quot;) MenuRow(image: &quot;creditcard&quot;, text: &quot;记账&quot;) MenuRow(image: &quot;person.and.person&quot;, text: &quot;团队&quot;) MenuRow(image: &quot;arrow.uturn.down&quot;, text: &quot;退出&quot;) Spacer()&#125;.padding(.top, 20)//顶边添加20.padding(30)//边距30.frame(minWidth: 0, maxWidth: .infinity).background(Color.white).cornerRadius(30).padding(.trailing, 60)//左边缘处理.shadow(radius: 20) 左对齐![image-20210201235337596](/Users/zhuguanliang/Library/Application Support/typora-user-images/image-20210201235337596.png?lastModify=1620950489) 使用数据创建列表使用数组创建模型对象 创建模型，进行拆分 菜单动画与其绑定 ![Feb-02-2021 00-31-19](/Users/zhuguanliang/Library/Application Support/typora-user-images/Feb-02-2021 00-31-19.gif?lastModify=1620950489)![Feb-02-2021 00-37-38](/Users/zhuguanliang/Library/Application Support/typora-user-images/Feb-02-2021 00-37-38.gif?lastModify=1620950489) 插入3d动画 将其变为MenuView（） 创建漂浮按钮创建按钮 12345678910HStack &#123; Spacer() Image(systemName: &quot;list.dash&quot;) .foregroundColor(.black)&#125;.padding(.trailing, 20).frame(width: 90, height: 60, alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/).background(Color.white).cornerRadius(30).shadow(color:Color(&quot;buttonShadow&quot;), radius: 10, x: 0, y: 10) 让按钮靠边栏 1.frame(minWidth: 0, maxWidth: .infinity, minHeight: 0, maxHeight: .infinity, alignment: .topLeading) 将其变为CircleButton（） 提取变量 第二个图标显示 将其变为MenuButton（） 移动到此与右边按钮修复 将home带到主页 添加动画![Feb-02-2021 10-57-52](/Users/zhuguanliang/Library/Application Support/typora-user-images/Feb-02-2021 10-57-52.gif?lastModify=1620950489) 创建侧边菜单栏","categories":[],"tags":[]},{"title":"swiftui初探（1）","slug":"初探（1）","date":"2020-01-16T04:49:00.000Z","updated":"2020-01-18T06:49:00.000Z","comments":true,"path":"2020/01/16/初探（1）/","link":"","permalink":"http://example.com/2020/01/16/%E5%88%9D%E6%8E%A2%EF%BC%881%EF%BC%89/","excerpt":"","text":"前言：在这系列文章你可以学到swiftUI SWIFT——UI新建项目添加启动图片，和色彩背景等 设置第一张卡片 12345678910111213141516 var body: some View &#123; VStack &#123; VStack &#123;• Text(&quot;UI 设计&quot;) .font(.title) .fontWeight(.bold) .foregroundColor(Color(&quot;accent&quot;)) .padding(.top) Text(/*@START_MENU_TOKEN@*/&quot;合格证书&quot;/*@END_MENU_TOKEN@*/) .foregroundColor(Color(.white)) &#125; Image(&quot;Background&quot;) &#125; .background(Color.black).cornerRadius(10) &#125;&#125; 布局和和堆栈 123456789101112131415161718 HStack &#123; VStack(alignment: .leading) &#123;• Text(&quot;UI 设计&quot;) .font(.title) .fontWeight(.bold) .foregroundColor(Color(&quot;accent&quot;)) .padding(.top) Text(/*@START_MENU_TOKEN@*/&quot;合格证书&quot;/*@END_MENU_TOKEN@*/) .foregroundColor(Color(.white)) &#125; .padding(.horizontal) Spacer()//推动到屏幕宽度 Image(&quot;Logo&quot;) .resizable() .frame(width: 30.0, height: 30.0) &#125; Image(&quot;Background&quot;)&#125;.frame(width: 340.0, height: 220.0) 设置第二章卡片 12345678910111213141516171819202122232425262728293031323334353637ZStack &#123; VStack &#123; Text(&quot;背后的卡&quot;) &#125; .padding() .frame(width: 300.0, height: 220.0) .background(Color.blue) .cornerRadius(10) .shadow(radius: 20) .offset(x: 0, y: -20) VStack &#123; HStack &#123; VStack(alignment: .leading) &#123;• Text(&quot;UI 设计&quot;) .font(.headline) .fontWeight(.bold) .foregroundColor(Color(&quot;accent&quot;)) .padding(.top) Text(/*@START_MENU_TOKEN@*/&quot;合格证书&quot;/*@END_MENU_TOKEN@*/) .foregroundColor(Color(.white)) &#125; Spacer()//推动到屏幕宽度 Image(&quot;Logo&quot;) .resizable() .frame(width: 30.0, height: 30.0) &#125; .padding(.horizontal) Spacer() Image(&quot;Background&quot;) &#125; .frame(width: 340.0, height: 220.0) .background(Color.black) .cornerRadius(10) .shadow(radius: 20)&#125; 添加标题，动画，图片123456789101112131415161718192021222324252627282930313233 VStack &#123; HStack &#123; Text(&quot;合格证书&quot;) .font(.largeTitle) .fontWeight(.heavy) Spacer() &#125; Image(&quot;Illustration5&quot;) Spacer() &#125;.padding()//边距 CardView() .offset(x: 0, y: -40) .scaleEffect(0.85) .rotationEffect(Angle(degrees: 15)) .rotation3DEffect(Angle(degrees: 50), axis: /*@START_MENU_TOKEN@*/(x: 10.0, y: 10.0, z: 10.0)/*@END_MENU_TOKEN@*/) .blendMode(.hardLight) CardView() .offset(x: 0, y: -20) .scaleEffect(0.9) .rotationEffect(Angle(degrees: 10)) .rotation3DEffect(Angle(degrees: 40), axis: /*@START_MENU_TOKEN@*/(x: 10.0, y: 10.0, z: 10.0)/*@END_MENU_TOKEN@*/) .blendMode(.hardLight) CertificateView() .scaleEffect(0.95) .rotationEffect(Angle(degrees: 5)) .rotation3DEffect(Angle(degrees: 30), axis: /*@START_MENU_TOKEN@*/(x: 10.0, y: 10.0, z: 10.0)/*@END_MENU_TOKEN@*/)&#125; 添加正方形在中间 123456789101112VStack(spacing: 20.0) &#123; Rectangle()//添加正方形在中间 .frame(width: 60, height: 6) .cornerRadius(30) .opacity(0.1)//模糊度 Text(&quot;各个国家有各个国家的国歌，和某地的语言像极了鸟语。方言太多了，所以要统一语言，说出的话大家理解的都是同一份意思，这是小的，对于全球这么多国家，需要的是尊重各个国家的文化和历史，所以语言也是喽。&quot;) .lineLimit(10) Spacer() &#125; .padding() .background(Color.blue) .cornerRadius(30) 底部卡片向下移动 并将新设置的给提到下面 设置动画效果模糊效果 添加动画 123456789101112131415161718192021222324252627282930313233343536373839 @State var show = false var body: some View &#123; ZStack &#123; TitleView() .blur(radius: show ? 20 : 0)//模糊效果 .animation(.default) CarBottomView() .blur(radius: show ? 20 : 0)//模糊效果 .animation(.default) CardView() .offset(x: 0, y: show ? -400 : -40) .scaleEffect(0.85) .rotationEffect(Angle(degrees: show ? 15 : 0)) .rotation3DEffect(Angle(degrees: show ? 50 : 0), axis: /*@START_MENU_TOKEN@*/(x: 10.0, y: 10.0, z: 10.0)/*@END_MENU_TOKEN@*/) .blendMode(.hardLight) .animation(Animation.easeInOut(duration: 0.7)) CardView() .offset(x: 0, y: show ? -200 : -20) .scaleEffect(0.9) .rotationEffect(Angle(degrees: show ? 10 : 0)) .rotation3DEffect(Angle(degrees: show ? 40 : 0), axis: (x: 10.0, y: 10.0, z: 10.0)) .blendMode(.hardLight) .animation(Animation.easeInOut(duration: 0.5)) CertificateView() .scaleEffect(0.95) .rotationEffect(Angle(degrees: show ? 5 : 0)) .rotation3DEffect(Angle(degrees: show ? 30 : 0), axis: /*@START_MENU_TOKEN@*/(x: 10.0, y: 10.0, z: 10.0)/*@END_MENU_TOKEN@*/) .animation(.spring()) .onTapGesture &#123; self.show.toggle() &#125; &#125; &#125;&#125; 修改后面卡片颜色 手势和事件自由拖动第一张卡片 12345678910@State var viewState = CGSize.zero .offset(x: viewState.width, y: viewState.height) .gesture( DragGesture() .onChanged(&#123; (Value) in self.viewState = Value.translation &#125;) 卡片归位 让三张卡片同时拖动","categories":[],"tags":[]},{"title":"oc版本的新闻App（4）","slug":"oc版本的新闻App（4）","date":"2019-04-16T04:49:00.000Z","updated":"2019-04-18T06:49:00.000Z","comments":true,"path":"2019/04/16/oc版本的新闻App（4）/","link":"","permalink":"http://example.com/2019/04/16/oc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%B0%E9%97%BBApp%EF%BC%884%EF%BC%89/","excerpt":"","text":"代码规范和重构点击右键rename重命名ViewController为GTNewsViewController 同时修改","categories":[],"tags":[]},{"title":"oc版本的新闻App（3）","slug":"oc版本的新闻App（3）","date":"2019-04-15T04:49:00.000Z","updated":"2019-04-17T06:49:00.000Z","comments":true,"path":"2019/04/15/oc版本的新闻App（3）/","link":"","permalink":"http://example.com/2019/04/15/oc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%B0%E9%97%BBApp%EF%BC%883%EF%BC%89/","excerpt":"","text":"UIImage and UIImageView添加UIImageView 123456789101112@property(nonatomic,strong,readwrite) UIImageView *rightImageView;//创建个UIImageView [self.contentView addSubview:(&#123; self.rightImageView = [[UIImageView alloc] initWithFrame:CGRectMake(280, 15, 70, 70)]; self.rightImageView.backgroundColor = [UIColor redColor]; self.rightImageView; &#125;)]; self.rightImageView.image = [UIImage imageNamed:@&quot;icon.bundle/timg.jpg&quot;]; Add UIButton、点击和手势添加UIButton 123456789@property(nonatomic,strong,readwrite) UIButton *deleteButton;//创建个UIImageView [self.contentView addSubview:(&#123; self.deleteButton = [[UIButton alloc] initWithFrame:CGRectMake(240, 80, 30, 20)]; self.deleteButton.backgroundColor = [UIColor blueColor]; [self.deleteButton setTitle:@&quot;X&quot; forState:UIControlStateNormal]; [self.deleteButton setTitle:@&quot;V&quot; forState:UIControlStateHighlighted]; self.deleteButton; &#125;)]; UIButton和用户交互相关的逻辑 12345[self.deleteButton addTarget:self action:@selector(deleteButtonClick) forControlEvents:UIControlEventTouchUpInside]; - (void)deleteButtonClick&#123; NSLog(@&quot;deleteButtonClick&quot;);&#125; 识别用户在屏幕中的触摸UIGestureRecognizer在推荐页面上添加一个view 12345[view addSubview:(&#123; UIView *view = [[UIView alloc] initWithFrame:CGRectMake(100, 200, 100, 100)]; view.backgroundColor = [UIColor yellowColor]; view;&#125;)]; 创建点击的手势，只有点击黄才有反应其他没有 12345678UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc]initWithTarget:self action:@selector(viewClick)];[view addGestureRecognizer:tapGesture];- (void)viewClick&#123; NSLog(@&quot;viewClick&quot;);&#125; 让其点击无或有反应 12345678@interface GTRecommendViewController ()&lt;UIScrollViewDelegate,UIGestureRecognizerDelegate&gt;tapGesture.delegate = self;- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer&#123; return YES;&#125; WKWebView and Delgate新建新的ViewController，GTDetailViewController 加载WKWebView到点击时显示 1234#import &quot;GTDetailViewController.h&quot;GTDetailViewController *controller = [[GTDetailViewController alloc]init]; GTDetailViewController代码如下123456789101112131415161718192021222324#import &quot;GTDetailViewController.h&quot;#import &lt;WebKit/WebKit.h&gt;@interface GTDetailViewController ()@property(nonatomic,strong,readwrite) WKWebView *webView;//添加WebView@end@implementation GTDetailViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view. [self.view addSubview:(&#123; self.webView = [[WKWebView alloc] initWithFrame:CGRectMake(0, 80, self.view.frame.size.width, self.view.frame.size.height - 88)];// self.webView.navigationDelegate = self; self.webView; &#125;)]; [self.webView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;https://www.thepaper.cn&quot;]]];&#125;@end 运行可以加载新闻页面 Delgate 12345678910@interface GTDetailViewController ()&lt;WKNavigationDelegate&gt;- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler&#123; NSLog(@&quot; &quot;); decisionHandler(WKNavigationActionPolicyAllow);&#125;- (void)webView:(WKWebView *)webView didFinishNavigation:(null_unspecified WKNavigation *)navigation&#123; NSLog(@&quot;&quot;);&#125; 观察者模式WebView加载进度的实现 KVO并展示页面加载进度 1234567891011- (void)dealloc&#123; [self.webView removeObserver:self forKeyPath:@&quot;estimatedProgress&quot;];&#125; [self.webView addObserver:self forKeyPath:@&quot;estimatedProgress&quot; options:NSKeyValueObservingOptionNew context:nil];//监听webView的属性 - (void)observeValueForKeyPath:(nullable NSString *)keyPath ofObject:(nullable id)object change:(nullable NSDictionary&lt;NSKeyValueChangeKey, id&gt; *)change context:(nullable void *)context&#123; NSLog(@&quot;&quot;);&#125; 给其加上进度的展示条，添加到navigationBar下面 @property(nonatomic,strong,readwrite) UIProgressView *progressView;//添加进度的展示条 [self.view addSubview:(&#123; self.progressView = [[UIProgressView alloc] initWithFrame:CGRectMake(0, 88, self.view.frame.size.width, 50)]; self.progressView; &#125;)]; self.progressView.progress = self.webView.estimatedProgress;//设置进度条的值 运行程序，进度条加上了 UIView动画完善界面的交互12345@protocol GTNormalTableViewCellDelegate &lt;NSObject&gt;- (void)tableViewCell:(UITableViewCell *)tableViewCell clickDeleteButton:(UIButton *)deleteButton;//实现点击的delegate@property(nonatomic,weak,readwrite) id&lt;GTNormalTableViewCellDelegate&gt; delegate;//设置tableViewCell属性 点击时的判断 123if(self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(tableViewCell:clickDeleteButton:)])&#123; [self.delegate tableViewCell:self clickDeleteButton:self.deleteButton]; &#125; 设置cell的delegate 12345678@interface ViewController()&lt;UITableViewDataSource,UITableViewDelegate,GTNormalTableViewCellDelegate&gt;cell.delegate = self;- (void)tableViewCell:(UITableViewCell *)tableViewCell clickDeleteButton:(UIButton *)deleteButton&#123; NSLog(@&quot;&quot;); &#125; 新建新的ViewController，GTDeleteCellView 1234567891011121314151617181920212223242526272829303132333435363738394041#import &quot;GTDeleteCellView.h&quot;@interface GTDeleteCellView ()@property(nonatomic,strong,readwrite)UIView *backgroudView;@property(nonatomic,strong,readwrite)UIButton *deleteButton;@end@implementation GTDeleteCellView- (instancetype)initWithFrame:(CGRect)frame&#123; self = [super initWithFrame:frame]; if(self)&#123; [self addSubview:(&#123; _backgroudView = [[UIView alloc] initWithFrame:self.bounds]; _backgroudView.backgroundColor = [UIColor blackColor]; _backgroudView.alpha = 0.5; _backgroudView; &#125;)]; [self addSubview:(&#123; _deleteButton = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 200, 200)]; [_deleteButton addTarget:self action:@selector(_clickButton) forControlEvents:UIControlEventTouchUpInside]; _deleteButton.backgroundColor = [UIColor blueColor]; _deleteButton; &#125;)]; &#125; return self;&#125;- (void)showDeleteView&#123; [[UIApplication sharedApplication].keyWindow addSubview:self];&#125;- (void)dismissDeleteView&#123; [self removeFromSuperview];&#125;-(void)_clickButton&#123; [self removeFromSuperview];&#125;@end 1234567- (void)showDeleteView;#import &quot;GTDeleteCellView.h&quot; GTDeleteCellView *deleteView = [[GTDeleteCellView alloc] initWithFrame:self.view.bounds]; [deleteView showDeleteView]; 同时添加个点击的手势 1234[_backgroudView addGestureRecognizer:(&#123; UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(dismissDeleteView)]; tapGesture;&#125;)]; 现在不用点击蓝筐就关闭，简单动画的实现 还可以实现回弹效果 123[UIView animateWithDuration:1.f animations:^&#123; self.deleteButton.frame = CGRectMake((self.bounds.size.width - 200)/2, (self.bounds.size.height - 200)/2, 200, 200);&#125;]; 点击按钮时跳出修改上边代码为123456 [UIView animateWithDuration:1.f delay:0.f usingSpringWithDamping:0.5 initialSpringVelocity:0.5 options:UIViewAnimationOptionCurveEaseInOut animations:^&#123; self.deleteButton.frame = CGRectMake((self.bounds.size.width - 200)/2, (self.bounds.size.height - 200)/2, 200, 200); &#125; completion:^(BOOL finished)&#123; NSLog(@&quot;&quot;); &#125;];&#125; 1- (void)showDeleteViewFromPoint:(CGPoint)point clickBlock:(dispatch_block_t) clickBlock; 12345CGRect rect = [tableViewCell convertRect:deleteButton.frame toView:nil];[deleteView showDeleteViewFromPoint:rect.origin clickBlock:^&#123; NSLog(@&quot;&quot;);&#125;]; 123456789101112@property(nonatomic,copy,readwrite)dispatch_block_t deleteBlock;//加在上面的属性- (void)showDeleteViewFromPoint:(CGPoint)point clickBlock:(dispatch_block_t) clickBlock&#123; _deleteButton.frame = CGRectMake(point.x, point.y, 0, 0); _deleteBlock = [clickBlock copy]; if(_deleteBlock)&#123; _deleteBlock(); &#125; 点蓝删除 12345678910111213141516171819202122232425262728291@property(nonatomic,strong,readwrite) UITableView *tableView;@property(nonatomic,strong,readwrite) NSMutableArray *dataArray;2 _dataArray = @[].mutableCopy; for(int i = 0;i&lt;20;i++)&#123; [_dataArray addObject:@(i)]; &#125; &#125; 3 _tableView = [[UITableView alloc] initWithFrame:self.view.bounds]; _tableView.dataSource = self; _tableView.delegate = self; [self.view addSubview:_tableView]; 4 return _dataArray.count; 5 __weak typeof (self) wself = self; [deleteView showDeleteViewFromPoint:rect.origin clickBlock:^&#123; __strong typeof(self)strongSelf = wself; [strongSelf.dataArray removeLastObject]; [strongSelf.tableView deleteRowsAtIndexPaths:@[[strongSelf.tableView indexPathForCell:tableViewCell]] withRowAnimation:UITableViewRowAnimationAutomatic]; 使用CAlayer实现圆角同时把蓝色代码删掉 12345self.deleteButton.layer.cornerRadius = 10;self.deleteButton.layer.masksToBounds = YES;self.deleteButton.layer.borderColor = [UIColor lightGrayColor].CGColor;self.deleteButton.layer.borderWidth = 2;","categories":[],"tags":[]},{"title":"oc版本的新闻App（2）","slug":"oc版本的新闻App2","date":"2019-04-14T04:49:00.000Z","updated":"2019-04-15T06:49:00.000Z","comments":true,"path":"2019/04/14/oc版本的新闻App2/","link":"","permalink":"http://example.com/2019/04/14/oc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%B0%E9%97%BBApp2/","excerpt":"","text":"视频界面的布局UITableViewCell的升级版 UIConnetViewCell新建新的ViewController，GTVideoViewController 1#import &quot;GTVideoViewController.h&quot; 将视频下的代码剪切了带到GTVideoViewController 修改的GTVideoViewController代码如下 1234567891011121314151617@implementation GTVideoViewController-(instancetype) init&#123; self = [super init]; if(self)&#123; self.tabBarItem.title = @&quot;视频&quot;; self.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/video@2x.png&quot;]; self.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/video_selected@2x.png&quot;]; &#125; return self;&#125;- (void)viewDidLoad &#123; [super viewDidLoad]; self.view.backgroundColor = [UIColor whiteColor];&#125; 添加上collectionView，并设置200个 12@interface GTVideoViewController ()&lt;UICollectionViewDelegate,UICollectionViewDataSource&gt;@end 1234567891011121314151617181920212223242526- (void)viewDidLoad &#123; [super viewDidLoad]; self.view.backgroundColor = [UIColor whiteColor]; UICollectionViewFlowLayout *flowLayout = [[UICollectionViewFlowLayout alloc] init]; UICollectionView *collectionView = [[UICollectionView alloc] initWithFrame:self.view.bounds collectionViewLayout:flowLayout]; collectionView.delegate = self; collectionView.dataSource = self; [collectionView registerClass:[UICollectionViewCell class] forCellWithReuseIdentifier:@&quot;UICollectionViewCell&quot;];//注册重用的cell [self.view addSubview:collectionView];&#125;- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section&#123; return 200;&#125;// The cell that is returned must be retrieved from a call to -dequeueReusableCellWithReuseIdentifier:forIndexPath:- (__kindof UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath&#123; UICollectionViewCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:@&quot;UICollectionViewCell&quot; forIndexPath:indexPath]; cell.backgroundColor = [UIColor redColor]; return cell;&#125; 使用UIcollectionView实现瀑布流效果collectionViewlayout的使用 123flowLayout.minimumLineSpacing = 10; //行间距flowLayout.minimumInteritemSpacing = 10; //item间的间距flowLayout.itemSize = CGSizeMake((self.view.frame.size.width - 10)/2,300); 1234567- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath&#123; if(indexPath.item %3 ==0)&#123; return CGSizeMake(self.view.frame.size.width,100); &#125;else&#123; return CGSizeMake((self.view.frame.size.width - 10)/2, 300); &#125;&#125; 推荐界面布局实现多个列表的横向滑动新建GTRecommendViewController，用作推进的视图控制器 在![image-20210110110027233](/Users/zhuguanliang/Library/Application Support/typora-user-images/image-20210110110027233.png?lastModify=1620831350) 然后它下面替换推荐列表 1234567GTRecommendViewController *recimmendController = [[GTRecommendViewController alloc] init];recimmendController.view.backgroundColor = [UIColor greenColor];recimmendController.tabBarItem.title = @&quot;推荐&quot;;recimmendController.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/like@2x.png&quot;];recimmendController.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/like_selected@2x.png&quot;];[tabbarConttroller setViewControllers:@[viewController,videoController,recimmendController,controller4]]; 将相关（绿色部分）逻辑剪切到GTRecommendViewController 123456789101112- (instancetype) init&#123; self = [super init]; if(self)&#123; self.tabBarItem.title = @&quot;推荐&quot;; self.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/like@2x.png&quot;]; self.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/like_selected@2x.png&quot;]; &#125; return self;&#125; self.view.backgroundColor = [UIColor whiteColor]; 推荐页面的ViewController完成 添加UIScrollView到推荐列表中 1234UIScrollView *scrollView = [[UIScrollView alloc] initWithFrame:self.view.bounds];scrollView.backgroundColor = [UIColor lightGrayColor];scrollView.contentSize = CGSizeMake(self.view.bounds.size.width * 5, self.view.bounds.size.height);//底部滚动条[self.view addSubview:scrollView]; 添加颜色翻页效果 1234567891011NSArray *colorArray = @[[UIColor redColor],[UIColor blueColor],[UIColor yellowColor],[UIColor lightGrayColor],[UIColor grayColor]];for(int i = 0;i &lt; 5; i++)&#123; [scrollView addSubview:(&#123; UIView *view = [[UIView alloc] initWithFrame:CGRectMake(scrollView.bounds.size.width * i, 0, scrollView.bounds.size.width, scrollView.bounds.size.height)]; view.backgroundColor = [colorArray objectAtIndex:i]; view; &#125;)];&#125;scrollView.pagingEnabled = YES; //翻页效果 UIScrollViewDelegate实现复杂逻辑的实现![image-20210110113319882](/Users/zhuguanliang/Library/Application Support/typora-user-images/image-20210110113319882.png?lastModify=1620831350) ![image-20210110113336979](/Users/zhuguanliang/Library/Application Support/typora-user-images/image-20210110113336979.png?lastModify=1620831350) ![image-20210110113402825](/Users/zhuguanliang/Library/Application Support/typora-user-images/image-20210110113402825.png?lastModify=1620831350) 12345678910111213141516171819202122232425262728293031@interface GTRecommendViewController ()&lt;UIScrollViewDelegate&gt; scrollView.delegate = self; - (void)scrollViewDidScroll:(UIScrollView *)scrollView&#123; // NSLog(@&quot;scrollViewDidScrollv - %@&quot;,@(scrollView.contentOffset.x));&#125;// called on start of dragging (may require some time and or distance to move)- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView&#123; NSLog(@&quot;BeginDragging&quot;);//开始拖拽&#125;// called on finger up if the user dragged. decelerate is true if it will continue moving afterwards- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate&#123; NSLog(@&quot;EndDragging&quot;);//结束拖拽&#125;// called on finger up as we are moving- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView&#123; &#125;// called when scroll view grinds to a halt- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView&#123; &#125; 进行拖拽，控制台输出信息 scrollViewDidScroll也包含于UITableView，可以使用监测滚动 123-(void)scrollViewDidScroll:(UIScrollView *)scrollView &#123; NSLog(@&quot;scrollViewDidScroll&quot;);&#125; iOS中文字的展示：UILabel的使用与布局新建新的ViewController，GTNormalTableViewCell 替换掉 删掉之前测试UIView的代码 替换掉系统默认的 删掉创建的 2.在GTNormalTableViewCell创建自己的UIlabel 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#import &quot;GTNormalTableViewCell.h&quot;@interface GTNormalTableViewCell ()@property(nonatomic,strong,readwrite) UILabel *titleLable;@property(nonatomic,strong,readwrite) UILabel *sourceLable;@property(nonatomic,strong,readwrite) UILabel *commentLable;@property(nonatomic,strong,readwrite) UILabel *timeLable;@end@implementation GTNormalTableViewCell- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(nullable NSString *)reuseIdentifier&#123; self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]; if(self)&#123; [self.contentView addSubview:(&#123; self.titleLable = [[UILabel alloc] initWithFrame:CGRectMake(20, 15, 300, 50)]; self.titleLable.backgroundColor = [UIColor redColor]; self.titleLable; &#125;)]; [self.contentView addSubview:(&#123; self.sourceLable = [[UILabel alloc] initWithFrame:CGRectMake(20, 80, 50, 20)]; self.sourceLable.backgroundColor = [UIColor redColor]; self.sourceLable.font = [UIFont systemFontOfSize:12]; self.sourceLable; &#125;)]; [self.contentView addSubview:(&#123; self.commentLable = [[UILabel alloc] initWithFrame:CGRectMake(100, 80, 50, 20)]; self.commentLable.backgroundColor = [UIColor redColor]; self.commentLable.font = [UIFont systemFontOfSize:12]; self.commentLable; &#125;)]; [self.contentView addSubview:(&#123; self.timeLable = [[UILabel alloc] initWithFrame:CGRectMake(150, 80, 50, 20)]; self.timeLable.backgroundColor = [UIColor redColor]; self.timeLable.font = [UIFont systemFontOfSize:12]; self.timeLable; &#125;)]; &#125; return self;&#125;@end 暴露方法 在每次需要布局的时候调用下 123- (void)layoutTableViewCell;[cell layoutTableViewCell]; 改GTNormalTableViewCell的UIlabel样式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(nullable NSString *)reuseIdentifier&#123; self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]; if(self)&#123; [self.contentView addSubview:(&#123; self.titleLable = [[UILabel alloc] initWithFrame:CGRectMake(20, 15, 300, 50)]; // self.titleLable.backgroundColor = [UIColor redColor]; self.titleLable.font = [UIFont systemFontOfSize:16]; self.titleLable.textColor = [UIColor blackColor]; self.titleLable; &#125;)]; [self.contentView addSubview:(&#123; self.sourceLable = [[UILabel alloc] initWithFrame:CGRectMake(20, 80, 50, 20)]; // self.sourceLable.backgroundColor = [UIColor redColor]; self.sourceLable.font = [UIFont systemFontOfSize:12]; self.sourceLable.textColor = [UIColor grayColor]; self.sourceLable; &#125;)]; [self.contentView addSubview:(&#123; self.commentLable = [[UILabel alloc] initWithFrame:CGRectMake(100, 80, 50, 20)]; // self.commentLable.backgroundColor = [UIColor redColor]; self.commentLable.font = [UIFont systemFontOfSize:12]; self.commentLable.textColor = [UIColor grayColor]; self.commentLable; &#125;)]; [self.contentView addSubview:(&#123; self.timeLable = [[UILabel alloc] initWithFrame:CGRectMake(150, 80, 50, 20)]; // self.timeLable.backgroundColor = [UIColor redColor]; self.timeLable.font = [UIFont systemFontOfSize:12]; self.timeLable.textColor = [UIColor grayColor]; self.timeLable; &#125;)]; &#125; return self;&#125;- (void)layoutTableViewCell&#123; self.titleLable.text = @&quot;这里这里这里demo&quot;; self.sourceLable.text = @&quot;这里demo&quot;; [self.sourceLable sizeToFit]; self.commentLable.text = @&quot;1666评论&quot;; [self.commentLable sizeToFit]; self.commentLable.frame = CGRectMake(self.sourceLable.frame.origin.x + self.sourceLable.frame.size.width + 15, self.commentLable.frame.origin.y, self.commentLable.frame.size.width, self.commentLable.frame.size.height); self.timeLable.text = @&quot;三分钟前&quot;; [self.timeLable sizeToFit]; self.timeLable.frame = CGRectMake(self.commentLable.frame.origin.x + self.commentLable.frame.size.width + 15, self.timeLable.frame.origin.y, self.timeLable.frame.size.width, self.timeLable.frame.size.height);&#125;@end","categories":[],"tags":[]},{"title":"oc版本的新闻App（1）","slug":"oc版本的新闻App(一)","date":"2019-04-13T04:49:00.000Z","updated":"2019-04-15T06:49:00.000Z","comments":true,"path":"2019/04/13/oc版本的新闻App(一)/","link":"","permalink":"http://example.com/2019/04/13/oc%E7%89%88%E6%9C%AC%E7%9A%84%E6%96%B0%E9%97%BBApp(%E4%B8%80)/","excerpt":"","text":"前言：在这系列文章你可以学到以下 1.熟练使用 UI 组件搭建 App 界面；2.掌握 iOS 开发关键技术模块；3.构建系统的移动开发知识体系；4.具体独立开发完整 App 的能力。 新闻界面的布局新建OC项目，导入图片 在SceneDelegate.m添加TabBar代码 代码： 123456789101112131415161718192021222324252627282930313233343536 self.window = [[UIWindow alloc] initWithWindowScene:(UIWindowScene *)scene]; UITabBarController *tabbarConttroller = [[UITabBarController alloc] init]; UIViewController *controller1 = [[UIViewController alloc] init]; controller1.view.backgroundColor = [UIColor redColor]; controller1.tabBarItem.title = @&quot;新闻&quot;; controller1.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/page@2x.png&quot;]; controller1.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/page_selected@2x.png&quot;]; UIViewController *controller2 = [[UIViewController alloc] init]; controller2.view.backgroundColor = [UIColor yellowColor]; controller2.tabBarItem.title = @&quot;视频&quot;; controller2.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/video@2x.png&quot;]; controller2.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/video_selected@2x.png&quot;]; UIViewController *controller3 = [[UIViewController alloc] init]; controller3.view.backgroundColor = [UIColor greenColor]; controller3.tabBarItem.title = @&quot;推荐&quot;; controller3.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/like@2x.png&quot;]; controller3.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/like_selected@2x.png&quot;]; UIViewController *controller4 = [[UIViewController alloc] init]; controller4.view.backgroundColor = [UIColor lightGrayColor]; controller4.tabBarItem.title = @&quot;我的&quot;; controller4.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/home@2x.png&quot;]; controller4.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/home_selected@2x.png&quot;]; [tabbarConttroller setViewControllers:@[controller1,controller2,controller3,controller4]]; self.window.rootViewController = tabbarConttroller; [self.window makeKeyAndVisible];&#125; 使用Navigation bar进行页面的切换 代码： 1234567891011121314151617181920212223242526272829303132333435363738 self.window = [[UIWindow alloc] initWithWindowScene:(UIWindowScene *)scene]; UITabBarController *tabbarConttroller = [[UITabBarController alloc] init]; ViewController *viewController = [[ViewController alloc] init]; UINavigationController *navigationController = [[UINavigationController alloc] initWithRootViewController:viewController]; // UIViewController *controller1 = [[UIViewController alloc] init];// controller1.view.backgroundColor = [UIColor redColor]; navigationController.tabBarItem.title = @&quot;新闻&quot;; navigationController.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/page@2x.png&quot;]; navigationController.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/page_selected@2x.png&quot;]; UIViewController *controller2 = [[UIViewController alloc] init]; controller2.view.backgroundColor = [UIColor yellowColor]; controller2.tabBarItem.title = @&quot;视频&quot;; controller2.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/video@2x.png&quot;]; controller2.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/video_selected@2x.png&quot;]; UIViewController *controller3 = [[UIViewController alloc] init]; controller3.view.backgroundColor = [UIColor greenColor]; controller3.tabBarItem.title = @&quot;推荐&quot;; controller3.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/like@2x.png&quot;]; controller3.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/like_selected@2x.png&quot;]; UIViewController *controller4 = [[UIViewController alloc] init]; controller4.view.backgroundColor = [UIColor lightGrayColor]; controller4.tabBarItem.title = @&quot;我的&quot;; controller4.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/home@2x.png&quot;]; controller4.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/home_selected@2x.png&quot;]; [tabbarConttroller setViewControllers:@[navigationController,controller2,controller3,controller4]]; self.window.rootViewController = tabbarConttroller; [self.window makeKeyAndVisible];&#125; ViewController.m代码修改如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#import &quot;ViewController.h&quot;@interface TestView : UIView@end@implementation TestView- (instancetype) init&#123; self = [super init]; if(self)&#123; &#125; return self;&#125;- (void)willMoveToSuperview:(nullable UIView *)newSuperview&#123; [super willMoveToSuperview:newSuperview]; &#125;- (void)didMoveToSuperview&#123; [super didMoveToSuperview];&#125;- (void)willMoveToWindow:(nullable UIWindow *)newWindow&#123; [super willMoveToWindow:newWindow];&#125;- (void)didMoveToWindow&#123; [super didMoveToWindow]; &#125;@end@interface ViewController()@end@implementation ViewController- (instancetype)init&#123; self = [super init]; if(self)&#123; &#125; return self;&#125;- (void)viewWillAppear:(BOOL)animated&#123; [super viewWillAppear:animated];&#125; // Called when the view is about to made visible. Default does nothing- (void)viewDidAppear:(BOOL)animated&#123; [super viewDidAppear:animated];&#125; // Called when the view has been fully transitioned onto the screen. Default does nothing- (void)viewWillDisappear:(BOOL)animated&#123; [super viewWillDisappear:animated];&#125; // Called when the view is dismissed, covered or otherwise hidden. Default does nothing- (void)viewDidDisappear:(BOOL)animated&#123; [super viewDidDisappear:animated];&#125; // Called after the view was dismissed, covered or otherwise hidden. Default does nothing- (void)viewDidLoad &#123; [super viewDidLoad]; self.view.backgroundColor = [UIColor whiteColor]; // Do any additional setup after loading the view.// UIView *view = [[UIView alloc] init];// view.backgroundColor = [UIColor redColor];// view.frame = CGRectMake(100, 100, 100, 100);// [self.view addSubview:view]; TestView *view2 = [[TestView alloc] init]; view2.backgroundColor = [UIColor greenColor]; view2.frame = CGRectMake(150, 150, 100, 100); [self.view addSubview:view2]; // view 先入栈，view2 后入栈，view2显示在view上 &#125;@end 像绿色的View添加新的方法，点击时可以推进新的view黑色页面 123- (void)pushController&#123; [self.navigationController pushViewController:[[UIViewController alloc]init] animated:YES];&#125; 同时pull进去时给其添加白色背景，标题 1234567- (void)pushController&#123; UIViewController *viewController = [[UIViewController alloc]init]; viewController.view.backgroundColor = [UIColor whiteColor]; viewController.navigationItem.title = @&quot;内容&quot;; viewController.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@&quot;右侧标题&quot; style:UIBarButtonItemStylePlain target:self action:nil]; [self.navigationController pushViewController:viewController animated:YES];&#125; 发现UInavigationController跳转底部TabBar还存在，去掉 后前对比图 1234567891011 viewController.tabBarItem.title = @&quot;新闻&quot;; viewController.tabBarItem.image = [UIImage imageNamed:@&quot;icon.bundle/page@2x.png&quot;]; viewController.tabBarItem.selectedImage = [UIImage imageNamed:@&quot;icon.bundle/page_selected@2x.png&quot;];[tabbarConttroller setViewControllers:@[viewController,controller2,controller3,controller4]]; UINavigationController *navigationController = [[UINavigationController alloc] initWithRootViewController:tabbarConttroller]; self.window.rootViewController = navigationController; delegate的使用1.先搞清楚谁是谁的代理(delegate) 2.定义代理协议,协议名称的命名规范:控件类名 + Delegate 3.定义代理方法 (1)代理方法一般都定义为@optional (2)代理方法名都以控件名开头 (3)代理方法至少有1个参数,将控件本身传递出去 4.设置代理(delegate)对象 (比如myView.delegate = xxxx;) (1)代理对象遵守协议 (2)代理对象实现协议里面该实现的方法 5.在恰当的时刻调用代理对象(delegate)的代理方法,通知代理发生了什么事情 (在调用之前判断代理是否实现了该代理方法) 1234567@interface SceneDelegate ()&lt;UITabBarControllerDelegate&gt; tabbarConttroller.delegate = self;- (void)tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController&#123; NSLog(@&quot;did select&quot;);&#125; 创建列表 把UI的逻辑删除掉，简单添加个UITableView 12UITableView *tableView = [[UITableView alloc] initWithFrame:self.view.bounds]; [self.view addSubview:tableView]; 同时添加一些数据 代码如下： 123456789101112131415161718192021@interface ViewController()&lt;UITableViewDataSource&gt; UITableView *tableView = [[UITableView alloc] initWithFrame:self.view.bounds]; tableView.dataSource = self; [self.view addSubview:tableView];&#125;- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; return 20;&#125;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; UITableViewCell *cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@&quot;id&quot;]; cell.textLabel.text = @&quot;主标题&quot;; cell.detailTextLabel.text = @&quot;副标题&quot;; cell.imageView.image = [UIImage imageNamed:@&quot;icon.bundle/video&quot;]; return cell;&#125; UITableView delegate datasource 123456789101112131415161718192021222324252627282930@interface ViewController()&lt;UITableViewDataSource,UITableViewDelegate&gt; tableView.delegate = self; [self.view addSubview:tableView];&#125;- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123; return 100;//高度&#125;- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath&#123; UIViewController *controller = [[UIViewController alloc]init]; //创建UIViewController controller.title = [NSString stringWithFormat:@&quot;%@&quot;,@(indexPath.row)];//设置标题，第几个显示第几 [self.navigationController pushViewController:controller animated:YES];//推进新页面&#125;- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; return 20;&#125;- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;id&quot;]; if(!cell)&#123; cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@&quot;id&quot;]; &#125; 第一部分完成整体运行App如下图","categories":[],"tags":[]}],"categories":[],"tags":[]}